/* eslint-disable */
import * as types from './graphql.js';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query SearchHltb($query: String!) {\n    hltb {\n      search(query: $query) {\n        id\n        title\n        releaseYear\n      }\n    }\n  }\n": typeof types.SearchHltbDocument,
    "\n  query GetHltbPlaytimes($id: String!) {\n    hltb {\n      playtimes(id: $id) {\n        id\n        title\n        url\n        image\n        main\n        mainExtra\n        completionist\n      }\n    }\n  }\n": typeof types.GetHltbPlaytimesDocument,
    "\n  query GetIgdbUpcomingEvents {\n    igdb {\n      upcomingEvents {\n        name\n        image\n        description\n        scheduledStartAt\n        scheduledEndAt\n        url {\n          youtube\n          twitch\n        }\n      }\n    }\n  }\n": typeof types.GetIgdbUpcomingEventsDocument,
    "\n  query SearchItad($query: String!) {\n    itad {\n      search(query: $query) {\n        id\n        title\n      }\n    }\n  }\n": typeof types.SearchItadDocument,
    "\n  query GetItadDeal($input: ItadDealInput!) {\n    itad {\n      deal(input: $input) {\n        id\n        appId\n        slug\n        title\n        image\n        releaseDate\n        reviews {\n          score\n          source\n          count\n          url\n        }\n        playerCount {\n          recent\n          day\n          week\n          peak\n        }\n        isEarlyAccess\n        hasAchievements\n        hasTradingCards\n        historicalLow {\n          all {\n            amount\n            amountInt\n            currency\n          }\n          y1 {\n            amount\n            amountInt\n            currency\n          }\n          m3 {\n            amount\n            amountInt\n            currency\n          }\n        }\n        deals {\n          url\n          voucher\n          store\n          regular {\n            amount\n            amountInt\n            currency\n          }\n          discounted {\n            amount\n            amountInt\n            currency\n          }\n          storeHistoricalLow {\n            amount\n            amountInt\n            currency\n          }\n          discount\n          drm\n          platforms\n          timestamp\n          expiry\n        }\n        bundles {\n          id\n          title\n          url\n          store\n          tiers {\n            price {\n              amount\n              amountInt\n              currency\n            }\n            games {\n              id\n              slug\n              title\n              type\n              mature\n            }\n          }\n          timestamp\n          expiry\n        }\n      }\n    }\n  }\n": typeof types.GetItadDealDocument,
    "\n  query GetItadFreebies($country: String) {\n    itad {\n      freebies(country: $country) {\n        id\n        slug\n        title\n        type\n        url\n        voucher\n        store\n        regular {\n          amount\n          amountInt\n          currency\n        }\n        discounted {\n          amount\n          amountInt\n          currency\n        }\n        discount\n        drm\n        platforms\n        timestamp\n        expiry\n      }\n    }\n  }\n": typeof types.GetItadFreebiesDocument,
    "\n  query GetRedditPosts($input: RedditPostsInput!) {\n    reddit {\n      posts(input: $input) {\n        title\n        url\n        selfurl\n        selftext\n        gallery {\n          url\n        }\n        isSelf\n        isCrosspost\n        isNsfw\n        isGallery\n        isImage\n        isVideo\n        isYoutubeEmbed\n        publishedAt\n      }\n    }\n  }\n": typeof types.GetRedditPostsDocument,
    "\n  query SearchReview($query: String!) {\n    reviews {\n      search(query: $query) {\n        title\n        url\n        score\n      }\n    }\n  }\n": typeof types.SearchReviewDocument,
    "\n  query GetReview($url: String!) {\n    reviews {\n      review(url: $url) {\n        title\n        url\n        image\n        description\n        releaseDate\n        genres\n        platforms\n        trailer {\n          title\n          description\n          thumbnailUrl\n        }\n        aggregateRating {\n          tier\n          ratingValue\n          reviewCount\n        }\n        developers\n        publishers\n      }\n    }\n  }\n": typeof types.GetReviewDocument,
    "\n  query SearchSteamApps($query: String!) {\n    steam {\n      search(query: $query) {\n        appId\n        title\n        url\n        image\n        price\n      }\n    }\n  }\n": typeof types.SearchSteamAppsDocument,
    "\n  query GetSteamId64($vanityUrl: String!) {\n    steam {\n      steamId64(vanityUrl: $vanityUrl)\n    }\n  }\n": typeof types.GetSteamId64Document,
    "\n  query GetSteamProfile($steamId64: String!) {\n    steam {\n      profile(steamId64: $steamId64) {\n        id\n        name\n        image\n        status\n        logoutAt\n        createdAt\n      }\n    }\n  }\n": typeof types.GetSteamProfileDocument,
    "\n  query GetSteamRecentlyPlayed($steamId64: String!) {\n    steam {\n      recentlyPlayed(steamId64: $steamId64) {\n        id\n        title\n        url\n        totalHours\n        biweeklyHours\n      }\n    }\n  }\n": typeof types.GetSteamRecentlyPlayedDocument,
    "\n  query GetSteamWishlist($steamId64: String!) {\n    steam {\n      wishlist(steamId64: $steamId64) {\n        priority\n        id\n        title\n        url\n        release {\n          date\n          customMessage\n        }\n        discount\n        regular\n        discounted\n        isFree\n        isReleased\n        assets {\n          capsule {\n            hero\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSteamWishlistDocument,
    "\n  query GetSteamAppPlayerCount($appId: Int!) {\n    steam {\n      playerCount(appId: $appId)\n    }\n  }\n": typeof types.GetSteamAppPlayerCountDocument,
    "\n  query GetSteamApps($appIds: [Int!]!) {\n    steam {\n      store(appIds: $appIds) {\n        id\n        title\n        url\n        release {\n          date\n          customMessage\n        }\n        description\n        discount\n        regular\n        discounted\n        isFree\n        isReleased\n        isGiftable\n        developers\n        publishers\n        franchises\n        screenshots\n        trailers {\n          title\n          trailer {\n            sd\n            max\n          }\n        }\n        assets {\n          capsule {\n            hero\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSteamAppsDocument,
    "\n  query GetSteamUpcomingSales {\n    steam {\n      upcomingSales {\n        sale\n        status\n        upcoming\n      }\n    }\n  }\n": typeof types.GetSteamUpcomingSalesDocument,
    "\n  query GetSteamChart($chart: SteamChartType!) {\n    steam {\n      chart(chart: $chart) {\n        position\n        name\n        url\n        count\n      }\n    }\n  }\n": typeof types.GetSteamChartDocument,
};
const documents: Documents = {
    "\n  query SearchHltb($query: String!) {\n    hltb {\n      search(query: $query) {\n        id\n        title\n        releaseYear\n      }\n    }\n  }\n": types.SearchHltbDocument,
    "\n  query GetHltbPlaytimes($id: String!) {\n    hltb {\n      playtimes(id: $id) {\n        id\n        title\n        url\n        image\n        main\n        mainExtra\n        completionist\n      }\n    }\n  }\n": types.GetHltbPlaytimesDocument,
    "\n  query GetIgdbUpcomingEvents {\n    igdb {\n      upcomingEvents {\n        name\n        image\n        description\n        scheduledStartAt\n        scheduledEndAt\n        url {\n          youtube\n          twitch\n        }\n      }\n    }\n  }\n": types.GetIgdbUpcomingEventsDocument,
    "\n  query SearchItad($query: String!) {\n    itad {\n      search(query: $query) {\n        id\n        title\n      }\n    }\n  }\n": types.SearchItadDocument,
    "\n  query GetItadDeal($input: ItadDealInput!) {\n    itad {\n      deal(input: $input) {\n        id\n        appId\n        slug\n        title\n        image\n        releaseDate\n        reviews {\n          score\n          source\n          count\n          url\n        }\n        playerCount {\n          recent\n          day\n          week\n          peak\n        }\n        isEarlyAccess\n        hasAchievements\n        hasTradingCards\n        historicalLow {\n          all {\n            amount\n            amountInt\n            currency\n          }\n          y1 {\n            amount\n            amountInt\n            currency\n          }\n          m3 {\n            amount\n            amountInt\n            currency\n          }\n        }\n        deals {\n          url\n          voucher\n          store\n          regular {\n            amount\n            amountInt\n            currency\n          }\n          discounted {\n            amount\n            amountInt\n            currency\n          }\n          storeHistoricalLow {\n            amount\n            amountInt\n            currency\n          }\n          discount\n          drm\n          platforms\n          timestamp\n          expiry\n        }\n        bundles {\n          id\n          title\n          url\n          store\n          tiers {\n            price {\n              amount\n              amountInt\n              currency\n            }\n            games {\n              id\n              slug\n              title\n              type\n              mature\n            }\n          }\n          timestamp\n          expiry\n        }\n      }\n    }\n  }\n": types.GetItadDealDocument,
    "\n  query GetItadFreebies($country: String) {\n    itad {\n      freebies(country: $country) {\n        id\n        slug\n        title\n        type\n        url\n        voucher\n        store\n        regular {\n          amount\n          amountInt\n          currency\n        }\n        discounted {\n          amount\n          amountInt\n          currency\n        }\n        discount\n        drm\n        platforms\n        timestamp\n        expiry\n      }\n    }\n  }\n": types.GetItadFreebiesDocument,
    "\n  query GetRedditPosts($input: RedditPostsInput!) {\n    reddit {\n      posts(input: $input) {\n        title\n        url\n        selfurl\n        selftext\n        gallery {\n          url\n        }\n        isSelf\n        isCrosspost\n        isNsfw\n        isGallery\n        isImage\n        isVideo\n        isYoutubeEmbed\n        publishedAt\n      }\n    }\n  }\n": types.GetRedditPostsDocument,
    "\n  query SearchReview($query: String!) {\n    reviews {\n      search(query: $query) {\n        title\n        url\n        score\n      }\n    }\n  }\n": types.SearchReviewDocument,
    "\n  query GetReview($url: String!) {\n    reviews {\n      review(url: $url) {\n        title\n        url\n        image\n        description\n        releaseDate\n        genres\n        platforms\n        trailer {\n          title\n          description\n          thumbnailUrl\n        }\n        aggregateRating {\n          tier\n          ratingValue\n          reviewCount\n        }\n        developers\n        publishers\n      }\n    }\n  }\n": types.GetReviewDocument,
    "\n  query SearchSteamApps($query: String!) {\n    steam {\n      search(query: $query) {\n        appId\n        title\n        url\n        image\n        price\n      }\n    }\n  }\n": types.SearchSteamAppsDocument,
    "\n  query GetSteamId64($vanityUrl: String!) {\n    steam {\n      steamId64(vanityUrl: $vanityUrl)\n    }\n  }\n": types.GetSteamId64Document,
    "\n  query GetSteamProfile($steamId64: String!) {\n    steam {\n      profile(steamId64: $steamId64) {\n        id\n        name\n        image\n        status\n        logoutAt\n        createdAt\n      }\n    }\n  }\n": types.GetSteamProfileDocument,
    "\n  query GetSteamRecentlyPlayed($steamId64: String!) {\n    steam {\n      recentlyPlayed(steamId64: $steamId64) {\n        id\n        title\n        url\n        totalHours\n        biweeklyHours\n      }\n    }\n  }\n": types.GetSteamRecentlyPlayedDocument,
    "\n  query GetSteamWishlist($steamId64: String!) {\n    steam {\n      wishlist(steamId64: $steamId64) {\n        priority\n        id\n        title\n        url\n        release {\n          date\n          customMessage\n        }\n        discount\n        regular\n        discounted\n        isFree\n        isReleased\n        assets {\n          capsule {\n            hero\n          }\n        }\n      }\n    }\n  }\n": types.GetSteamWishlistDocument,
    "\n  query GetSteamAppPlayerCount($appId: Int!) {\n    steam {\n      playerCount(appId: $appId)\n    }\n  }\n": types.GetSteamAppPlayerCountDocument,
    "\n  query GetSteamApps($appIds: [Int!]!) {\n    steam {\n      store(appIds: $appIds) {\n        id\n        title\n        url\n        release {\n          date\n          customMessage\n        }\n        description\n        discount\n        regular\n        discounted\n        isFree\n        isReleased\n        isGiftable\n        developers\n        publishers\n        franchises\n        screenshots\n        trailers {\n          title\n          trailer {\n            sd\n            max\n          }\n        }\n        assets {\n          capsule {\n            hero\n          }\n        }\n      }\n    }\n  }\n": types.GetSteamAppsDocument,
    "\n  query GetSteamUpcomingSales {\n    steam {\n      upcomingSales {\n        sale\n        status\n        upcoming\n      }\n    }\n  }\n": types.GetSteamUpcomingSalesDocument,
    "\n  query GetSteamChart($chart: SteamChartType!) {\n    steam {\n      chart(chart: $chart) {\n        position\n        name\n        url\n        count\n      }\n    }\n  }\n": types.GetSteamChartDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchHltb($query: String!) {\n    hltb {\n      search(query: $query) {\n        id\n        title\n        releaseYear\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchHltb($query: String!) {\n    hltb {\n      search(query: $query) {\n        id\n        title\n        releaseYear\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHltbPlaytimes($id: String!) {\n    hltb {\n      playtimes(id: $id) {\n        id\n        title\n        url\n        image\n        main\n        mainExtra\n        completionist\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHltbPlaytimes($id: String!) {\n    hltb {\n      playtimes(id: $id) {\n        id\n        title\n        url\n        image\n        main\n        mainExtra\n        completionist\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetIgdbUpcomingEvents {\n    igdb {\n      upcomingEvents {\n        name\n        image\n        description\n        scheduledStartAt\n        scheduledEndAt\n        url {\n          youtube\n          twitch\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetIgdbUpcomingEvents {\n    igdb {\n      upcomingEvents {\n        name\n        image\n        description\n        scheduledStartAt\n        scheduledEndAt\n        url {\n          youtube\n          twitch\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchItad($query: String!) {\n    itad {\n      search(query: $query) {\n        id\n        title\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchItad($query: String!) {\n    itad {\n      search(query: $query) {\n        id\n        title\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetItadDeal($input: ItadDealInput!) {\n    itad {\n      deal(input: $input) {\n        id\n        appId\n        slug\n        title\n        image\n        releaseDate\n        reviews {\n          score\n          source\n          count\n          url\n        }\n        playerCount {\n          recent\n          day\n          week\n          peak\n        }\n        isEarlyAccess\n        hasAchievements\n        hasTradingCards\n        historicalLow {\n          all {\n            amount\n            amountInt\n            currency\n          }\n          y1 {\n            amount\n            amountInt\n            currency\n          }\n          m3 {\n            amount\n            amountInt\n            currency\n          }\n        }\n        deals {\n          url\n          voucher\n          store\n          regular {\n            amount\n            amountInt\n            currency\n          }\n          discounted {\n            amount\n            amountInt\n            currency\n          }\n          storeHistoricalLow {\n            amount\n            amountInt\n            currency\n          }\n          discount\n          drm\n          platforms\n          timestamp\n          expiry\n        }\n        bundles {\n          id\n          title\n          url\n          store\n          tiers {\n            price {\n              amount\n              amountInt\n              currency\n            }\n            games {\n              id\n              slug\n              title\n              type\n              mature\n            }\n          }\n          timestamp\n          expiry\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetItadDeal($input: ItadDealInput!) {\n    itad {\n      deal(input: $input) {\n        id\n        appId\n        slug\n        title\n        image\n        releaseDate\n        reviews {\n          score\n          source\n          count\n          url\n        }\n        playerCount {\n          recent\n          day\n          week\n          peak\n        }\n        isEarlyAccess\n        hasAchievements\n        hasTradingCards\n        historicalLow {\n          all {\n            amount\n            amountInt\n            currency\n          }\n          y1 {\n            amount\n            amountInt\n            currency\n          }\n          m3 {\n            amount\n            amountInt\n            currency\n          }\n        }\n        deals {\n          url\n          voucher\n          store\n          regular {\n            amount\n            amountInt\n            currency\n          }\n          discounted {\n            amount\n            amountInt\n            currency\n          }\n          storeHistoricalLow {\n            amount\n            amountInt\n            currency\n          }\n          discount\n          drm\n          platforms\n          timestamp\n          expiry\n        }\n        bundles {\n          id\n          title\n          url\n          store\n          tiers {\n            price {\n              amount\n              amountInt\n              currency\n            }\n            games {\n              id\n              slug\n              title\n              type\n              mature\n            }\n          }\n          timestamp\n          expiry\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetItadFreebies($country: String) {\n    itad {\n      freebies(country: $country) {\n        id\n        slug\n        title\n        type\n        url\n        voucher\n        store\n        regular {\n          amount\n          amountInt\n          currency\n        }\n        discounted {\n          amount\n          amountInt\n          currency\n        }\n        discount\n        drm\n        platforms\n        timestamp\n        expiry\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetItadFreebies($country: String) {\n    itad {\n      freebies(country: $country) {\n        id\n        slug\n        title\n        type\n        url\n        voucher\n        store\n        regular {\n          amount\n          amountInt\n          currency\n        }\n        discounted {\n          amount\n          amountInt\n          currency\n        }\n        discount\n        drm\n        platforms\n        timestamp\n        expiry\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetRedditPosts($input: RedditPostsInput!) {\n    reddit {\n      posts(input: $input) {\n        title\n        url\n        selfurl\n        selftext\n        gallery {\n          url\n        }\n        isSelf\n        isCrosspost\n        isNsfw\n        isGallery\n        isImage\n        isVideo\n        isYoutubeEmbed\n        publishedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRedditPosts($input: RedditPostsInput!) {\n    reddit {\n      posts(input: $input) {\n        title\n        url\n        selfurl\n        selftext\n        gallery {\n          url\n        }\n        isSelf\n        isCrosspost\n        isNsfw\n        isGallery\n        isImage\n        isVideo\n        isYoutubeEmbed\n        publishedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchReview($query: String!) {\n    reviews {\n      search(query: $query) {\n        title\n        url\n        score\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchReview($query: String!) {\n    reviews {\n      search(query: $query) {\n        title\n        url\n        score\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetReview($url: String!) {\n    reviews {\n      review(url: $url) {\n        title\n        url\n        image\n        description\n        releaseDate\n        genres\n        platforms\n        trailer {\n          title\n          description\n          thumbnailUrl\n        }\n        aggregateRating {\n          tier\n          ratingValue\n          reviewCount\n        }\n        developers\n        publishers\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetReview($url: String!) {\n    reviews {\n      review(url: $url) {\n        title\n        url\n        image\n        description\n        releaseDate\n        genres\n        platforms\n        trailer {\n          title\n          description\n          thumbnailUrl\n        }\n        aggregateRating {\n          tier\n          ratingValue\n          reviewCount\n        }\n        developers\n        publishers\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchSteamApps($query: String!) {\n    steam {\n      search(query: $query) {\n        appId\n        title\n        url\n        image\n        price\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchSteamApps($query: String!) {\n    steam {\n      search(query: $query) {\n        appId\n        title\n        url\n        image\n        price\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSteamId64($vanityUrl: String!) {\n    steam {\n      steamId64(vanityUrl: $vanityUrl)\n    }\n  }\n"): (typeof documents)["\n  query GetSteamId64($vanityUrl: String!) {\n    steam {\n      steamId64(vanityUrl: $vanityUrl)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSteamProfile($steamId64: String!) {\n    steam {\n      profile(steamId64: $steamId64) {\n        id\n        name\n        image\n        status\n        logoutAt\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSteamProfile($steamId64: String!) {\n    steam {\n      profile(steamId64: $steamId64) {\n        id\n        name\n        image\n        status\n        logoutAt\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSteamRecentlyPlayed($steamId64: String!) {\n    steam {\n      recentlyPlayed(steamId64: $steamId64) {\n        id\n        title\n        url\n        totalHours\n        biweeklyHours\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSteamRecentlyPlayed($steamId64: String!) {\n    steam {\n      recentlyPlayed(steamId64: $steamId64) {\n        id\n        title\n        url\n        totalHours\n        biweeklyHours\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSteamWishlist($steamId64: String!) {\n    steam {\n      wishlist(steamId64: $steamId64) {\n        priority\n        id\n        title\n        url\n        release {\n          date\n          customMessage\n        }\n        discount\n        regular\n        discounted\n        isFree\n        isReleased\n        assets {\n          capsule {\n            hero\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSteamWishlist($steamId64: String!) {\n    steam {\n      wishlist(steamId64: $steamId64) {\n        priority\n        id\n        title\n        url\n        release {\n          date\n          customMessage\n        }\n        discount\n        regular\n        discounted\n        isFree\n        isReleased\n        assets {\n          capsule {\n            hero\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSteamAppPlayerCount($appId: Int!) {\n    steam {\n      playerCount(appId: $appId)\n    }\n  }\n"): (typeof documents)["\n  query GetSteamAppPlayerCount($appId: Int!) {\n    steam {\n      playerCount(appId: $appId)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSteamApps($appIds: [Int!]!) {\n    steam {\n      store(appIds: $appIds) {\n        id\n        title\n        url\n        release {\n          date\n          customMessage\n        }\n        description\n        discount\n        regular\n        discounted\n        isFree\n        isReleased\n        isGiftable\n        developers\n        publishers\n        franchises\n        screenshots\n        trailers {\n          title\n          trailer {\n            sd\n            max\n          }\n        }\n        assets {\n          capsule {\n            hero\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSteamApps($appIds: [Int!]!) {\n    steam {\n      store(appIds: $appIds) {\n        id\n        title\n        url\n        release {\n          date\n          customMessage\n        }\n        description\n        discount\n        regular\n        discounted\n        isFree\n        isReleased\n        isGiftable\n        developers\n        publishers\n        franchises\n        screenshots\n        trailers {\n          title\n          trailer {\n            sd\n            max\n          }\n        }\n        assets {\n          capsule {\n            hero\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSteamUpcomingSales {\n    steam {\n      upcomingSales {\n        sale\n        status\n        upcoming\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSteamUpcomingSales {\n    steam {\n      upcomingSales {\n        sale\n        status\n        upcoming\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSteamChart($chart: SteamChartType!) {\n    steam {\n      chart(chart: $chart) {\n        position\n        name\n        url\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSteamChart($chart: SteamChartType!) {\n    steam {\n      chart(chart: $chart) {\n        position\n        name\n        url\n        count\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;